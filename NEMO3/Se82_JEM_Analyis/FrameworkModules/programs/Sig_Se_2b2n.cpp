/*
 File:      Sig_Se_2b2n.cpp
 Author:    James Mott
 
 Description: Measurement of internal backgrounds in the 1e channel.
 */

// Framework and Edm headers
#include "Hereward/DataProcPipeline/AppUserBuild.h"
#include "Hereward/Edm/addEdm.h"
#include "JEM_Analysis/Se2b2nCuts.h"
#include "NemoMods/NemorH10LocalTrackingInputMod.h"
#include "NemoMods/NemoCalibration.h"
#include "NemoMods/ElectronFinder.h"
#include "NemoMods/AlphaFinder.h"
#include "NemoMods/GammaFinder.h"
#include "NemoMods/CaloClusterFinder.h"

// Required modules - in the final structure a unique header will be used to add
// all mandatory modules and headers. 
#include "Hereward/SuperNemoProcessing/addSNemoRequiredObjects.h"
#include "Hereward/SuperNemoData/addSuperNemoObjects.h"
#include "NemoObjects/addNemoObjects.h"
#include "Hereward/SuperNemoProcessing/RootOutputManager.h"
#include "NemoMods/N3DbInterfaceModule.h"
#include "NemoMods/RunStatusController.h"
#include "NemoMods/NemoCalibration.h"
#include "Hereward/SuperNemoProcessing/EventDumpModule.h"

AppUserBuild::AppUserBuild(AppFramework* theFramework)
: AppBuild(theFramework) {

    /* these two functions call static methods of the objects - 
     needed to load static interfaces generated by ROOT dictionaries
     */
    addSNemoRequiredObjects();
    addSuperNemoData();
    addNemoObjects();
    
    N3DbInterfaceModule* dbModule = new N3DbInterfaceModule();
    dbModule->setServerName("db1.hep.ucl.ac.uk");
    dbModule->setPort(3306);

    NemorH10LocalTrackingInputMod* inputModule = new NemorH10LocalTrackingInputMod();
    inputModule->setDataInputList("./DataFiles.lst");

    add(inputModule);    
    add(dbModule);

    RunStatusController* rcModule;
    rcModule = new RunStatusController();
    rcModule->addRequiredRunStatus(RunStatusController::STANDARD_RUN);
    // Add status 0 so that we don't kill neutron runs (OK for other samples as MC and data lists are already selecting runs)
    rcModule->addRequiredRunStatus(RunStatusController::BI207_RUNS);
    rcModule->addRequiredDataTakingPhase(RunStatusController::AllRuns);
    rcModule->setLoadRunSummary(true);
    rcModule->setCorrectBadDeadTimes(true);
    rcModule->setServerName("db1.hep.ucl.ac.uk");
    rcModule->setPort(3306);
    rcModule->setAssignedEventsFileName("./RecoAssignedEvents.txt");
    add(rcModule);

    AppModule* aModule;
    aModule = new NemoCalibration();       add(aModule);

    ElectronFinder* eFinder = new ElectronFinder();
    eFinder->setUseLocalFit(true);
    add(eFinder);

    aModule = new AlphaFinder();           add(aModule);
    aModule = new GammaFinder();           add(aModule);
    aModule = new CaloClusterFinder();     add(aModule);
    aModule = new Se2b2nCuts();            add(aModule);
    aModule = new RootOutputManager();     add(aModule);
}

AppUserBuild::~AppUserBuild() {
    /* the modules are created by the AppUserBuild but they are then owned by 
     the Framework, therefore the Framework is going to delete the Modules that 
     have been created in the constructor.
     */
}
