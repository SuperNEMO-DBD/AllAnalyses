/*
 * Class        : N3TrueGeigerHit
 * Description  : Definition of the object containing the data of the N3True Geiger hit
 *                generated by GEANT
 *
 *  Created by Stefano Torre on 02/07/11.
 */
#ifndef N3TRUEGEIGERHIT_H_
#define N3TRUEGEIGERHIT_H_

#include "Hereward/Edm/EventRecord.h"
#include "CLHEP/Vector/ThreeVector.h"
#include "TBuffer.h"

class N3TrueGeigerHit {
public:
    //-------------------------------------------------------------------------
    // Constructors
    //-------------------------------------------------------------------------
    N3TrueGeigerHit();
    N3TrueGeigerHit(const N3TrueGeigerHit& obj);
    N3TrueGeigerHit& operator = (const N3TrueGeigerHit& obj);
    
    //-------------------------------------------------------------------------
    // Destructors
    //-------------------------------------------------------------------------
    virtual ~N3TrueGeigerHit();
    
    //-------------------------------------------------------------------------
    // Getters and Setters
    //-------------------------------------------------------------------------
    int cellSide() const;
    int oldCellSide() const;    
    int cellLayer() const;
    int cellRow() const;    
    int cellColumn() const;
    int oldCellColumn() const;
    CLHEP::Hep3Vector hitPosition() const;
    double hitTime() const;
    double xOfAnodeWire() const;
    double yOfAnodeWire() const;
    
    void setStatus(const int aValue);
    void setCellSide(const int aValue);
    void setOldCellSide(const int aValue);
    void setLayer(const int aValue);
    void setCellRow(const int aValue);
    void setCellColumn(const int aValue);
    void setOldCellColumn(const int aValue);
    void setXOfAnodeWire(const double aValue);
    void setYOfAnodeWire(const double aValue);
    void setHitPosition(const CLHEP::Hep3Vector aValue);
    void setHitPosition(double x, double y, double z);
    void sethitTime(double aValue);
    
    //-------------------------------------------------------------------------
    // Print methods
    //-------------------------------------------------------------------------
    virtual void print(std::ostream &output = std::cout) const;

    //-------------------------------------------------------------------------
    // Classifiers
    //-------------------------------------------------------------------------
    std::string class_name() const;
    Version_t class_version() const {return version_; }

    //-------------------------------------------------------------------------
    // I/O Methods
    //-------------------------------------------------------------------------    
    void Streamer(TBuffer& iobuffer);    
    bool postread(EventRecord* p_record);
    void readFromBuffer(TBuffer& buf, Version_t version);
    void writeToBuffer(TBuffer& buf);
    
private:
    int cellSide_;
    int cellColumn_;
    int cellLayer_;
    double xOfAnodeWire_;
    double yOfAnodeWire_;
    CLHEP::Hep3Vector hitPosition_;
    double            hitTime_;
    static const Version_t version_ = 1;
    Version_t versionRead_;
};

//-------------------------------------------------------------------------
// Streamer operator
//-------------------------------------------------------------------------
std::ostream& operator << (std::ostream& os, const N3TrueGeigerHit& obj);

#ifndef __CINT__
//-------------------------------------------------------------------------
// Getters and Setters
//-------------------------------------------------------------------------

inline int N3TrueGeigerHit::cellSide() const {
    return cellSide_;
}

inline int N3TrueGeigerHit::oldCellSide() const {
    return (cellSide_ == 0) ? -1 : 1;
}

inline int N3TrueGeigerHit::cellLayer() const {
    return cellLayer_;
}

inline int N3TrueGeigerHit::cellRow() const {
    return cellLayer_ + 1;
}

inline int N3TrueGeigerHit::cellColumn() const {
    return cellColumn_;
}

inline int N3TrueGeigerHit::oldCellColumn() const {
    return (cellColumn_-56);
}

inline double N3TrueGeigerHit::xOfAnodeWire() const {
    return xOfAnodeWire_;
}

inline double N3TrueGeigerHit::yOfAnodeWire() const {
    return yOfAnodeWire_;
}

inline CLHEP::Hep3Vector N3TrueGeigerHit::hitPosition() const {
    return hitPosition_;
}

inline double N3TrueGeigerHit::hitTime() const {
    return hitTime_;
}

inline void N3TrueGeigerHit::setCellSide(const int aValue) {
    cellSide_ = aValue;
}

inline void N3TrueGeigerHit::setOldCellSide(const int aValue) {
    cellSide_ = (aValue == 1) ? 1 : 0;
}

inline void N3TrueGeigerHit::setLayer(const int aValue) {
    cellLayer_ = aValue;
}

inline void N3TrueGeigerHit::setCellRow(const int aValue) {
    cellLayer_ = aValue - 1;
}

inline void N3TrueGeigerHit::setCellColumn(const int aValue) {
    cellColumn_ = aValue;
}

inline void N3TrueGeigerHit::setOldCellColumn(const int aValue) {
    cellColumn_ = aValue + 56;
}

inline void N3TrueGeigerHit::setXOfAnodeWire(const double aValue) {
    xOfAnodeWire_ = aValue;
}

inline void N3TrueGeigerHit::setYOfAnodeWire(const double aValue) {
    yOfAnodeWire_ = aValue;
}

inline void N3TrueGeigerHit::setHitPosition(const CLHEP::Hep3Vector aValue) {
    hitPosition_ = aValue;
}

inline void N3TrueGeigerHit::setHitPosition(double x, double y, double z) {
    hitPosition_ = CLHEP::Hep3Vector(x,y,z);
}

inline void N3TrueGeigerHit::sethitTime(double aValue) {
    hitTime_ = aValue;
}

#endif

#endif
