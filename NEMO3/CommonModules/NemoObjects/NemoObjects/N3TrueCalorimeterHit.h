/*
 * Class        : N3TrueCalorimeterHit
 * Description  : Definition of the object containing the data of the N3True Geiger hit
 *                generated by GEANT
 *
 *  Created by Stefano Torre on 31/12/11.
 */
#ifndef N3TRUECALORIMETERHIT_H_
#define N3TRUECALORIMETERHIT_H_

#include "Hereward/Edm/EventRecord.h"
#include "CLHEP/Vector/ThreeVector.h"
#include "TBuffer.h"

class N3TrueCalorimeterHit {
public:
    //-------------------------------------------------------------------------
    // Constructors
    //-------------------------------------------------------------------------
    N3TrueCalorimeterHit();
    N3TrueCalorimeterHit(const N3TrueCalorimeterHit& obj);
    N3TrueCalorimeterHit& operator = (const N3TrueCalorimeterHit& obj);
    
    //-------------------------------------------------------------------------
    // Destructors
    //-------------------------------------------------------------------------
    virtual ~N3TrueCalorimeterHit();
    
    //-------------------------------------------------------------------------
    // Getters and Setters
    //-------------------------------------------------------------------------
    int blockType() const;
    int blockModule() const;
    int blockSide() const;
    int blockRow() const;    
    int blockColumn() const;
    CLHEP::Hep3Vector hitPosition() const;
    double hitTime() const;
    double energy() const;
    
    void setBlockType(const int aValue);
    void setBlockModule(const int aValue);
    void setBlockSide(const int aValue);
    void setBlockRow(const int aValue);
    void setBlockColumn(const int aValue);
    void setHitPosition(const CLHEP::Hep3Vector aValue);
    void setHitPosition(double x, double y, double z);
    void setHitTime(double aValue);
    void setEnergy(double aValue);
    
    //-------------------------------------------------------------------------
    // Print methods
    //-------------------------------------------------------------------------
    virtual void print(std::ostream &output = std::cout) const;

    //-------------------------------------------------------------------------
    // Classifiers
    //-------------------------------------------------------------------------
    std::string class_name() const;
    Version_t class_version() const {return version_; }

    //-------------------------------------------------------------------------
    // I/O Methods
    //-------------------------------------------------------------------------    
    void Streamer(TBuffer& iobuffer);    
    bool postread(EventRecord* p_record);
    void readFromBuffer(TBuffer& buf, Version_t version);
    void writeToBuffer(TBuffer& buf);
    
private:
    int blockType_;
    int blockModule_;
    int blockSide_;
    int blockColumn_;
    int blockRow_;
    CLHEP::Hep3Vector hitPosition_;
    double            hitTime_;
    double            energy_;
    static const Version_t version_ = 1;
    Version_t versionRead_;
};

//-------------------------------------------------------------------------
// Streamer operator
//-------------------------------------------------------------------------
std::ostream& operator << (std::ostream& os, const N3TrueCalorimeterHit& obj);

#ifndef __CINT__
//-------------------------------------------------------------------------
// Getters and Setters
//-------------------------------------------------------------------------

inline int N3TrueCalorimeterHit::blockType() const {
    return blockType_;
}

inline int N3TrueCalorimeterHit::blockModule() const {
    return blockModule_;
}

inline int N3TrueCalorimeterHit::blockSide() const {
    return blockSide_;
}

inline int N3TrueCalorimeterHit::blockRow() const {
    return blockRow_;
}

inline int N3TrueCalorimeterHit::blockColumn() const {
    return blockColumn_;
}

inline CLHEP::Hep3Vector N3TrueCalorimeterHit::hitPosition() const {
    return hitPosition_;
}

inline double N3TrueCalorimeterHit::hitTime() const {
    return hitTime_;
}

inline double N3TrueCalorimeterHit::energy() const {
    return energy_;
}

inline void N3TrueCalorimeterHit::setBlockType(const int aValue) {
    blockType_ = aValue;
}

inline void N3TrueCalorimeterHit::setBlockModule(const int aValue) {
    blockModule_ = aValue;
}

inline void N3TrueCalorimeterHit::setBlockSide(const int aValue) {
    blockSide_ = aValue;
}

inline void N3TrueCalorimeterHit::setBlockRow(const int aValue) {
    blockRow_ = aValue;
}

inline void N3TrueCalorimeterHit::setBlockColumn(const int aValue) {
    blockColumn_ = aValue;
}

inline void N3TrueCalorimeterHit::setHitPosition(const CLHEP::Hep3Vector aValue) {
    hitPosition_ = aValue;
}

inline void N3TrueCalorimeterHit::setHitPosition(double x, double y, double z) {
    hitPosition_ = CLHEP::Hep3Vector(x,y,z);
}

inline void N3TrueCalorimeterHit::setHitTime(double aValue) {
    hitTime_ = aValue;
}

inline void N3TrueCalorimeterHit::setEnergy(double aValue) {
    energy_ = aValue;
}

#endif

#endif
