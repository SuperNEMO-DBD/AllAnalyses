Sensitivity Study readme
========================

Cheryl Patrick (UCL)
May 17, 2017

========================

The Sensitivity Study contains several utilities of varying degrees of reusability (for example, they include some hardcoded paths to files on my own disk). If people want to use any of this, I can tidy it up and make it accessible to other users.

Included in this study, I have:

- SensitivityModule (Falaise pipeline module to process selected data from the SD, CD, TCD, TTD and PTD banks and output a ROOT file. Has significant overlap with the ParticleID module, but is not the same).

- AnalyseSensitivity (Runs a 0nubb half-life sensitivity study, sequentially applying basic cuts to tuples generated by the SensitivityModule. Takes samples from 0nubb, 2nubb, and various backgrounds, and calculates a sensitivity using TLimit. Background rates may be incorrect; use with caution).

feedthroughEfficiency (plots efficiencies of various cuts for gammas of different energies and origins that might result from alpha-n interactions in the CuBe feedthroughs)

energyResolution (just a quick and dirty script to figure out how the calorimeter energy and time resolution in simulation relate to the energy/time. Might be of use to someone sometime?)

- backgroundStudy (Uses things2root tuples looking at the SD bank to plot various truth quantities for background samples)

More detail below
—————————————————

=================
SensitivityModule
=================
Files:
SensitivityModule.cpp
SensitivityModule.conf
SensitivityModule.h
CMakeLists.txt

Add to an flreconstruct pipeline to generate a ROOT ntuple file with some pertinent branches. SensitivityModule.conf gives an example of how I run it; in this case my input file would be something that had already been through the standard flreconstruct pipeline, and that includes SD, CD, TCD, TTD, PTD banks. The output file will always be called sensitivity.root so don’t run it multiple times concurrently in the same directory!
CMakeLists.txt will build it on my Mac; I don’t guarantee (or even expect) it will work everywhere. In fact I know it doesn’t, but you can use it as a starting point.

This is the structure of the tuple that it makes:


sensitivity.total_calorimeter_energy : Summed energy of all reconstructed calorimeter hits (CD bank)

sensitivity.passes_two_calorimeters : True if there are exactly 2 reconstructed calorimeter hits over 50 keV, of which at least 1 is over 150keV (CD bank)

sensitivity.passes_two_plus_calos :True if there are at least 2 reconstructed calorimeter hits over 50 keV, of which at least 1 is over 150keV (CD bank)

sensitivity.passes_two_clusters : True if there are exactly two reconstructed clusters with 3 or more hits (TCD bank)

sensitivity.passes_two_tracks : True if there are exactly two reconstructed tracks (TTD bank)

sensitivity.passes_associated_calorimeters : True if there are exactly two tracks, and they are both associated to one or more calorimeter hits. Equivalent (at the moment to a 2-electron topology)

sensitivity.number_of_electrons : Number of electron-candidate tracks - that is, tracks that are associated to one or more calorimeter hits. No check on the charge as of yet. No requirement for a foil vertex. (PTD bank)

sensitivity.number_of_gammas : Number of gamma candidates - when calorimeter hits that aren’t associated to tracks have been grouped by the gamma tracko-clustering algorithm to correspond to what appear to be individual gammas (PTD bank)

sensitivity.higher_electron_energy : Energy of the highest-energy electron candidate, summed over all associated calorimeter hits (at the moment I don’t think more than 1 hit is allowed, but that could change in future). 0 if no electron candidates. Corresponds to sensitivity.electron_energies[0].

sensitivity.lower_electron_energy : Energy of the second-highest-energy electron candidate, summed over all associated calorimeter hits (at the moment I don’t think more than 1 hit is allowed, but that could change in future). 0 if less than 2 electron candidates. Corresponds to sensitivity.electron_energies[1].

sensitivity.electron_energies : Vector of all electron-candidate energies. In descending order of energy.

sensitivity.gamma_energies : Vector of all electron-candidate energies. In descending order of energy.
                               
sensitivity.true_higher_electron_energy :  Same as true_highest_primary_energy
                        
sensitivity.true_lower_electron_energy : Same as  sensitivity.true_second_primary_energy

sensitivity.true_highest_primary_energy : The energy of the highest-energy primary particle in the interaction (from SD bank)

sensitivity.true_second_primary_energy : The energy of the second-highest-energy primary particle in the interaction (from SD bank)
   
sensitivity.true_total_energy : Summed energy of every primary particle in the interaction (from SD bank)

sensitivity.first_vertex_x : If there are two tracks, vertex x position of an arbitrary “first” track. Foil is at x ~ 0, main calo walls are at +/- 434.994 mm according to flvisualize. Unit is mm.

sensitivity.first_vertex_y : If there are two tracks, vertex y position of an arbitrary “first” track. The y direction is horizontal, parallel to the foil, you can see it in top view. Unit is mm.

sensitivity.first_vertex_z : If there are two tracks, vertex z position of an arbitrary “first” track. The z direction is vertical, parallel to the wires, you can see it in side view. Unit is mm.

sensitivity.second_vertex_x : If there are two tracks, vertex x position of an arbitrary “2nd” track. Foil is at x ~ 0, main calo walls are at +/- 434.994 mm according to flvisualize. Unit is mm.

sensitivity.second_vertex_y :  If there are two tracks, vertex y position of an arbitrary “2nd” track. The y direction is horizontal, parallel to the foil, you can see it in top view. Unit is mm.

sensitivity.second_vertex_z : If there are two tracks, vertex z position of an arbitrary “2nd” track. The z direction is vertical, parallel to the wires, you can see it in side view. Unit is mm.

sensitivity.vertex_separation : Distance between the inner-most (nearest to the foil) vertices of the two tracks (only if there are 2 electron candidates).  Unit is mm.

sensitivity.first_projected_vertex_y
sensitivity.first_projected_vertex_z
sensitivity.second_projected_vertex_y
sensitivity.second_projected_vertex_z: Only for 2-electron or 1e-n-gamma topologies. If both tracks were linearly projected back to the foil (x=0), these would be their y and z coordinates.  Unit is mm.

sensitivity.foil_projection_separation : Only if there are 2 electron candidates. If both tracks were linearly projected back to the foil, this is the distance between where the tracks intersect the foil.  Unit is mm.

sensitivity.projection_distance_xy : How far in the xy plane we had to project our longest-projected track. Proxy for how many cells we are claiming to have a track, but where we didn’t reconstruct a hit. Could be replaced by a mapping of broken cells etc.

sensitivity.vertices_on_foil : If 2 tracks: number of tracks with a vertex on the foil.

sensitivity.first_vertices_on_foil : Obsolete

sensitivity.angle_between_tracks : For 2-electron events: Angle between the initial momentum vectors of the two tracks. Does not require them to share a vertex (maybe it should). For 1-electron-n-gamma events, angle between the electron track and the highest-energy gamma “track”, if we assume that the gamma travels from the foil-most electron vertex to the centre of the calorimeter that it hits first.

sensitivity.same_side_of_foil : If 2 tracks: True if both tracks are on the same side of the foil, false if not

sensitivity.first_track_direction_x :                               sensitivity.first_track_direction_y :                               sensitivity.first_track_direction_z :                               sensitivity.second_track_direction_x :                              sensitivity.second_track_direction_y :                              sensitivity.second_track_direction_z :  Initial direction vectors for the two tracks (Only if two tracks, arbitrary which is which)

sensitivity.time_delay : If 2 calorimeter hits  - time delay in nanoseconds between the hits. Used in the past as a crude proxy for internal/external probability.

sensitivity.topology_2e : True if event has a 2-electron topology (2 tracks with associated calorimeter hits, no gammas, no other tracks). False if not.

sensitivity.internal_probability :  Calculates the probability that it is an internal event (both tracks are initiated in the foil). Available for 2-electron events, or 1-electron-n-gamma events, in which case it uses the path of the highest energy gamma. If internal, this should be equally distributed from 0 to 1. If external (particle leaves one calorimeter, travels to foil, then to another calorimeter) this will be very close to 0. Calculated from energy and time of calorimeter hits vs length of tracks.

sensitivity.internal_chi_squared :  Intermediate step to calculating internal_probability

sensitivity.external_probability : If 2 associated tracks, this calculates the probability that it is an external event (particle leaves one calorimeter, travels to foil, then to another calorimeter).   Available for 2-electron events, or 1-electron-n-gamma events, in which case it uses the path of the highest energy gamma. If external, this should be equally distributed from 0 to 1. If internal  (both tracks are initiated in the foil) this will be very close to 0. Calculated from energy and time of calorimeter hits vs length of tracks.

sensitivity.external_chi_squared :  Intermediate step to calculating external_probability
                               
sensitivity.foil_projected_internal_probability
sensitivity.foil_projected_external_probability: As internal and external probability, if each track’s length were extended to project the track linearly back to the foil

sensitivity.topology_1e1gamma : True if event has 1 electron candidate (track with associated hits) and 1 gamma candidate (collection of unassociated hits with timings corresponding to a single gamma)

sensitivity.topology_1engamma : True if event has 1 electron candidate (track with associated hits) and 1 or more gamma candidates (collections of unassociated hits with timings corresponding to a gamma)

sensitivity.calorimeter_hit_count: Number of calorimeter hits

sensitivity.cluster_count: Number of clusters with 3 or more hits

sensitivity.track_count: Number of tracks in the tracker

sensitivity.associated_track_count : Number of electron candidates

sensitivity.alpha_count : Not used yet

sensitivity.foil_alpha_count : Not used yet

sensitivity.latest_delayed_hit : Not used yet

sensitivity.small_cluster_count: Number of clusters with 2 hits

sensitivity.third_calo_energy: copy of highest_gamma_energy, name kept for legacy

sensitivity.highest_gamma_energy: Highest energy gamma, may come from more than 1 calorimeter hit as specified by gamma tracko- clustering

sensitivity.edgemost_vertex: Absolute y position (in mm) of the vertex that is nearest to the edge of the detector in the y dimension. This could possibly be used with small cluster identification to find events near the edge of the detector who have two tracks, each associated with a calorimeter and with close vertices on the foil, but for one of which there are only 2 hits (because it is too near the edge to pass through 3 cells).

====================
AnalyseSensitivity
====================

Requires the Sensitivity ntuple format of SensitivityModule. Is set up to run on selenium samples (which are hardcoded in there right now) but adding Nd150 and Ca48 would be straightforward (just uncomment a couple of lines of code in main()) if you had the simulation to look at. This code requires input tuple files for samples of:
0nubb
2nubb (I generated this only for events over 2MeV total energy, if you do that you will need to work out the fraction of total 2nubb events that actually got simulated)

It makes efficiency plots for a variety of cut combinations, at the moment I am trying with and without a charge requirement and with and without internal/external probablity, on top of the standard cut set (2 calorimeter hits, 2 associated tracks). Probably some of these combinations are not needed (why would we not use the int/ext probability? Just there to compare with old studies) and it would be easy to add new ones (e.g. vertex distance requirement) in MakePlotsForIsotope.

Output plots are:
- energy distribution for 0nubb and 2nubb (Area normalised)
- efficiency for 0nubb and 2nubb if a lower minimum cut were made
- efficiencies with background isotopes
	- Tl208 in foil
	- Bi214 in foil
	- Bi214 on foil surface (mylar)
	- Tl208 on foil surface (mylar)
	- Bi214 on wires (from radon in tracker)
   I am not confident of the activities for these.

We then use this to calculate sensitivity
	- vs minimum energy cut, but ignoring backgrounds, using window method
	- overall using TLimit, ignoring backgrounds
	- overall using TLimit, including backgrounds
Method is taken from James Mott’s thesis


=====================
feedthroughEfficiency
=====================
A somewhat rough program to plot the efficiency of reconstructing gammas that might come from (alpha, n) reactions in the feedthroughs. I use ntuples produced from Falaise simulation/standard reconstructed pipeline and the SensitivityModule.

Includes hard-coded regions of interest for the two isotopes (Se82:2.8-3.2 MeV, Nd150:3.2-3.6 MeV) which might not be what we use in the end. Selection of gamma energies and source positions in the detector (need to be matched to corresponding simulation, which is currently hardcoded to simulation I’ve generated). Assuming you provide the files, it will do Nd150 or Se82 (remember to use variant service to change the foil to Nd150 when simulating).

Three command line options:
isotope:	“nd”, “Nd”, “nd150” or “Nd150” give Nd-150, else Se-82
location:	ft (=feedthrough)
		cw (=calorimeter wrapper)
		sh (=shielding)
		all (loops through all location/energy combos)
energy:		if “4” then 4 MeV gammas, else 7-8 (again this is just matching to simulation files I have made)

Files are saved to subdirectory feedthroughplots.